#compdef stackablectl

autoload -U is-at-least

_stackablectl() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_stackablectl_commands" \
"*::: :->stackablectl" \
&& ret=0
    case $state in
    (stackablectl)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-command-$line[1]:"
        case $line[1] in
            (operator)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_stackablectl__operator_commands" \
"*::: :->operator" \
&& ret=0

    case $state in
    (operator)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-operator-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':OPERATOR -- Operator to describe:' \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
'--operator-namespace=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'--operator-ns=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'-c+[Type of local cluster to use for testing]:CLUSTER_TYPE:((kind\:"Use a kind cluster, see <https\://docs.stackable.tech/home/getting_started.html#_installing_kubernetes_using_kind>"
minikube\:"Use a minikube cluster"))' \
'--cluster=[Type of local cluster to use for testing]:CLUSTER_TYPE:((kind\:"Use a kind cluster, see <https\://docs.stackable.tech/home/getting_started.html#_installing_kubernetes_using_kind>"
minikube\:"Use a minikube cluster"))' \
'--cluster-name=[Name of the local cluster]:CLUSTER_NAME: ' \
'--cluster-nodes=[Number of total nodes in the local cluster]:CLUSTER_NODES: ' \
'--cluster-cp-nodes=[Number of control plane nodes in the local cluster]:CLUSTER_CP_NODES: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
'*::OPERATORS -- Operator(s) to install:' \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
'--operator-namespace=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'--operator-ns=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
'*::operators -- One or more operators to uninstall:' \
&& ret=0
;;
(installed)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--operator-namespace=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'--operator-ns=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__operator__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-operator-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(installed)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(release)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_stackablectl__release_commands" \
"*::: :->release" \
&& ret=0

    case $state in
    (release)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-release-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':RELEASE:' \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
'*-i+[Whitelist of product operators to install]:INCLUDED_PRODUCTS: ' \
'*--include=[Whitelist of product operators to install]:INCLUDED_PRODUCTS: ' \
'*-e+[Blacklist of product operators to install]:EXCLUDED_PRODUCTS: ' \
'*--exclude=[Blacklist of product operators to install]:EXCLUDED_PRODUCTS: ' \
'--operator-namespace=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'--operator-ns=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'-c+[Type of local cluster to use for testing]:CLUSTER_TYPE:((kind\:"Use a kind cluster, see <https\://docs.stackable.tech/home/getting_started.html#_installing_kubernetes_using_kind>"
minikube\:"Use a minikube cluster"))' \
'--cluster=[Type of local cluster to use for testing]:CLUSTER_TYPE:((kind\:"Use a kind cluster, see <https\://docs.stackable.tech/home/getting_started.html#_installing_kubernetes_using_kind>"
minikube\:"Use a minikube cluster"))' \
'--cluster-name=[Name of the local cluster]:CLUSTER_NAME: ' \
'--cluster-nodes=[Number of total nodes in the local cluster]:CLUSTER_NODES: ' \
'--cluster-cp-nodes=[Number of control plane nodes in the local cluster]:CLUSTER_CP_NODES: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':RELEASE -- Release to install:' \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
'--operator-namespace=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'--operator-ns=[Namespace in the cluster used to deploy the operators]:OPERATOR_NAMESPACE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':RELEASE -- Name of the release to uninstall:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__release__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-release-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(stack)
_arguments "${_arguments_options[@]}" : \
'--release=[Target a specific Stackable release]:RELEASE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_stackablectl__stack_commands" \
"*::: :->stack" \
&& ret=0

    case $state in
    (stack)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-stack-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--release=[Target a specific Stackable release]:RELEASE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--release=[Target a specific Stackable release]:RELEASE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':stack_name -- Name of the stack to describe:' \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
'*--stack-parameters=[List of parameters to use when installing the stack]:STACK_PARAMETERS: ' \
'*--parameters=[List of parameters to use when installing the stack]:PARAMETERS: ' \
'-c+[Type of local cluster to use for testing]:CLUSTER_TYPE:((kind\:"Use a kind cluster, see <https\://docs.stackable.tech/home/getting_started.html#_installing_kubernetes_using_kind>"
minikube\:"Use a minikube cluster"))' \
'--cluster=[Type of local cluster to use for testing]:CLUSTER_TYPE:((kind\:"Use a kind cluster, see <https\://docs.stackable.tech/home/getting_started.html#_installing_kubernetes_using_kind>"
minikube\:"Use a minikube cluster"))' \
'--cluster-name=[Name of the local cluster]:CLUSTER_NAME: ' \
'--cluster-nodes=[Number of total nodes in the local cluster]:CLUSTER_NODES: ' \
'--cluster-cp-nodes=[Number of control plane nodes in the local cluster]:CLUSTER_CP_NODES: ' \
'--operator-namespace=[Namespace where the operators are deployed]:OPERATOR_NAMESPACE: ' \
'--operator-ns=[Namespace where the operators are deployed]:OPERATOR_NAMESPACE: ' \
'-n+[Namespace where the stacks or demos are deployed]:NAMESPACE: ' \
'--namespace=[Namespace where the stacks or demos are deployed]:NAMESPACE: ' \
'--product-ns=[Namespace where the stacks or demos are deployed]:NAMESPACE: ' \
'--release=[Target a specific Stackable release]:RELEASE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--skip-release[Skip the installation of the release during the stack install process]' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':stack_name -- Name of the stack to describe:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__stack__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-stack-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(stacklet)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_stackablectl__stacklet_commands" \
"*::: :->stacklet" \
&& ret=0

    case $state in
    (stacklet)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-stacklet-command-$line[1]:"
        case $line[1] in
            (credentials)
_arguments "${_arguments_options[@]}" : \
'-n+[Namespace in the cluster used to deploy the products]:PRODUCT_NAMESPACE: ' \
'--product-namespace=[Namespace in the cluster used to deploy the products]:PRODUCT_NAMESPACE: ' \
'--product-ns=[Namespace in the cluster used to deploy the products]:PRODUCT_NAMESPACE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':product_name -- The name of the product, for example '\''superset'\'':' \
':stacklet_name -- The name of the stacklet, for example '\''superset'\'':' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--operator-namespace=[Namespace where the operators are deployed]:OPERATOR_NAMESPACE: ' \
'--operator-ns=[Namespace where the operators are deployed]:OPERATOR_NAMESPACE: ' \
'-n+[Namespace where the stacks or demos are deployed]:NAMESPACE: ' \
'--namespace=[Namespace where the stacks or demos are deployed]:NAMESPACE: ' \
'--product-ns=[Namespace where the stacks or demos are deployed]:NAMESPACE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__stacklet__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-stacklet-help-command-$line[1]:"
        case $line[1] in
            (credentials)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(demo)
_arguments "${_arguments_options[@]}" : \
'--release=[Target a specific Stackable release]:RELEASE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_stackablectl__demo_commands" \
"*::: :->demo" \
&& ret=0

    case $state in
    (demo)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-demo-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--release=[Target a specific Stackable release]:RELEASE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
'-o+[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--output=[]:OUTPUT_TYPE:((plain\:"Print output formatted as plain text"
table\:"Print output formatted as a table"
json\:"Print output formatted as JSON"
yaml\:"Print output formatted as YAML"))' \
'--release=[Target a specific Stackable release]:RELEASE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':DEMO -- Demo to describe:' \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
'*--stack-parameters=[List of parameters to use when installing the stack]:STACK_PARAMETERS: ' \
'*--parameters=[List of parameters to use when installing the demo]:PARAMETERS: ' \
'-c+[Type of local cluster to use for testing]:CLUSTER_TYPE:((kind\:"Use a kind cluster, see <https\://docs.stackable.tech/home/getting_started.html#_installing_kubernetes_using_kind>"
minikube\:"Use a minikube cluster"))' \
'--cluster=[Type of local cluster to use for testing]:CLUSTER_TYPE:((kind\:"Use a kind cluster, see <https\://docs.stackable.tech/home/getting_started.html#_installing_kubernetes_using_kind>"
minikube\:"Use a minikube cluster"))' \
'--cluster-name=[Name of the local cluster]:CLUSTER_NAME: ' \
'--cluster-nodes=[Number of total nodes in the local cluster]:CLUSTER_NODES: ' \
'--cluster-cp-nodes=[Number of control plane nodes in the local cluster]:CLUSTER_CP_NODES: ' \
'--operator-namespace=[Namespace where the operators are deployed]:OPERATOR_NAMESPACE: ' \
'--operator-ns=[Namespace where the operators are deployed]:OPERATOR_NAMESPACE: ' \
'-n+[Namespace where the stacks or demos are deployed]:NAMESPACE: ' \
'--namespace=[Namespace where the stacks or demos are deployed]:NAMESPACE: ' \
'--product-ns=[Namespace where the stacks or demos are deployed]:NAMESPACE: ' \
'--release=[Target a specific Stackable release]:RELEASE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--skip-release[Skip the installation of the release during the stack install process]' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':DEMO -- Demo to install:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__demo__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-demo-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(completions)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_stackablectl__completions_commands" \
"*::: :->completions" \
&& ret=0

    case $state in
    (completions)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-completions-command-$line[1]:"
        case $line[1] in
            (bash)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(elvish)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(fish)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(nushell)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(zsh)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__completions__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-completions-help-command-$line[1]:"
        case $line[1] in
            (bash)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(elvish)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(fish)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nushell)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zsh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(cache)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_stackablectl__cache_commands" \
"*::: :->cache" \
&& ret=0

    case $state in
    (cache)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-cache-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(clean)
_arguments "${_arguments_options[@]}" : \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--old[Only remove outdated files in the cache]' \
'--outdated[Only remove outdated files in the cache]' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__cache__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-cache-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(clean)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(experimental-debug)
_arguments "${_arguments_options[@]}" : \
'-n+[The namespace of the Pod being debugged]:NAMESPACE: ' \
'--namespace=[The namespace of the Pod being debugged]:NAMESPACE: ' \
'-c+[The target container to debug]:CONTAINER: ' \
'--container=[The target container to debug]:CONTAINER: ' \
'--image=[The debug container image]:IMAGE: ' \
'-l+[Log level this application uses]:LOG_LEVEL: ' \
'--log-level=[Log level this application uses]:LOG_LEVEL: ' \
'*-d+[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*--demo-file=[Provide one or more additional (custom) demo file(s)]:DEMO_FILE:_files' \
'*-s+[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*--stack-file=[Provide one or more additional (custom) stack file(s)]:STACK_FILE:_files' \
'*-r+[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'*--release-file=[Provide one or more additional (custom) release file(s)]:RELEASE_FILE:_files' \
'--helm-repo-stable=[Provide a custom Helm stable repository URL]:URL:_urls' \
'--helm-repo-test=[Provide a custom Helm test repository URL]:URL:_urls' \
'--helm-repo-dev=[Provide a custom Helm dev repository URL]:URL:_urls' \
'--chart-source=[Source the charts from either a OCI registry or from index.yaml-based repositories]:CHART_SOURCE:((oci\:"OCI registry"
repo\:"index.yaml-based repositories\: resolution (dev, test, stable) is based on the version and thus will be operator-specific"))' \
'--no-cache[Do not cache the remote (default) demo, stack and release files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':pod -- The Pod to debug:' \
'*::cmd -- The command to run in the debug container:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-help-command-$line[1]:"
        case $line[1] in
            (operator)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__help__operator_commands" \
"*::: :->operator" \
&& ret=0

    case $state in
    (operator)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-help-operator-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(installed)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(release)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__help__release_commands" \
"*::: :->release" \
&& ret=0

    case $state in
    (release)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-help-release-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(stack)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__help__stack_commands" \
"*::: :->stack" \
&& ret=0

    case $state in
    (stack)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-help-stack-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(stacklet)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__help__stacklet_commands" \
"*::: :->stacklet" \
&& ret=0

    case $state in
    (stacklet)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-help-stacklet-command-$line[1]:"
        case $line[1] in
            (credentials)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(demo)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__help__demo_commands" \
"*::: :->demo" \
&& ret=0

    case $state in
    (demo)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-help-demo-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(describe)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(completions)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__help__completions_commands" \
"*::: :->completions" \
&& ret=0

    case $state in
    (completions)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-help-completions-command-$line[1]:"
        case $line[1] in
            (bash)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(elvish)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(fish)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nushell)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zsh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(cache)
_arguments "${_arguments_options[@]}" : \
":: :_stackablectl__help__cache_commands" \
"*::: :->cache" \
&& ret=0

    case $state in
    (cache)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:stackablectl-help-cache-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(clean)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(experimental-debug)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_stackablectl_commands] )) ||
_stackablectl_commands() {
    local commands; commands=(
'operator:Interact with single operator instead of the full platform' \
'release:Interact with all operators of the platform which are released together' \
'stack:Interact with stacks, which are ready-to-use product combinations' \
'stacklet:Interact with deployed stacklets, which are bundles of resources and containers required to run the product' \
'demo:Interact with demos, which are end-to-end usage demonstrations of the Stackable data platform' \
'completions:Generate shell completions for this tool' \
'cache:Interact with locally cached files' \
'experimental-debug:EXPERIMENTAL\: Launch a debug container for a Pod' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl commands' commands "$@"
}
(( $+functions[_stackablectl__cache_commands] )) ||
_stackablectl__cache_commands() {
    local commands; commands=(
'list:List cached files' \
'clean:Clean cached files' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl cache commands' commands "$@"
}
(( $+functions[_stackablectl__cache__clean_commands] )) ||
_stackablectl__cache__clean_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl cache clean commands' commands "$@"
}
(( $+functions[_stackablectl__cache__help_commands] )) ||
_stackablectl__cache__help_commands() {
    local commands; commands=(
'list:List cached files' \
'clean:Clean cached files' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl cache help commands' commands "$@"
}
(( $+functions[_stackablectl__cache__help__clean_commands] )) ||
_stackablectl__cache__help__clean_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl cache help clean commands' commands "$@"
}
(( $+functions[_stackablectl__cache__help__help_commands] )) ||
_stackablectl__cache__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl cache help help commands' commands "$@"
}
(( $+functions[_stackablectl__cache__help__list_commands] )) ||
_stackablectl__cache__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl cache help list commands' commands "$@"
}
(( $+functions[_stackablectl__cache__list_commands] )) ||
_stackablectl__cache__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl cache list commands' commands "$@"
}
(( $+functions[_stackablectl__completions_commands] )) ||
_stackablectl__completions_commands() {
    local commands; commands=(
'bash:Generate shell completions for Bash' \
'elvish:Generate shell completions for Elvish' \
'fish:Generate shell completions for Fish' \
'nushell:Generate shell completions for Nushell' \
'zsh:Generate shell completions for ZSH' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl completions commands' commands "$@"
}
(( $+functions[_stackablectl__completions__bash_commands] )) ||
_stackablectl__completions__bash_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions bash commands' commands "$@"
}
(( $+functions[_stackablectl__completions__elvish_commands] )) ||
_stackablectl__completions__elvish_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions elvish commands' commands "$@"
}
(( $+functions[_stackablectl__completions__fish_commands] )) ||
_stackablectl__completions__fish_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions fish commands' commands "$@"
}
(( $+functions[_stackablectl__completions__help_commands] )) ||
_stackablectl__completions__help_commands() {
    local commands; commands=(
'bash:Generate shell completions for Bash' \
'elvish:Generate shell completions for Elvish' \
'fish:Generate shell completions for Fish' \
'nushell:Generate shell completions for Nushell' \
'zsh:Generate shell completions for ZSH' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl completions help commands' commands "$@"
}
(( $+functions[_stackablectl__completions__help__bash_commands] )) ||
_stackablectl__completions__help__bash_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions help bash commands' commands "$@"
}
(( $+functions[_stackablectl__completions__help__elvish_commands] )) ||
_stackablectl__completions__help__elvish_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions help elvish commands' commands "$@"
}
(( $+functions[_stackablectl__completions__help__fish_commands] )) ||
_stackablectl__completions__help__fish_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions help fish commands' commands "$@"
}
(( $+functions[_stackablectl__completions__help__help_commands] )) ||
_stackablectl__completions__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions help help commands' commands "$@"
}
(( $+functions[_stackablectl__completions__help__nushell_commands] )) ||
_stackablectl__completions__help__nushell_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions help nushell commands' commands "$@"
}
(( $+functions[_stackablectl__completions__help__zsh_commands] )) ||
_stackablectl__completions__help__zsh_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions help zsh commands' commands "$@"
}
(( $+functions[_stackablectl__completions__nushell_commands] )) ||
_stackablectl__completions__nushell_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions nushell commands' commands "$@"
}
(( $+functions[_stackablectl__completions__zsh_commands] )) ||
_stackablectl__completions__zsh_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl completions zsh commands' commands "$@"
}
(( $+functions[_stackablectl__demo_commands] )) ||
_stackablectl__demo_commands() {
    local commands; commands=(
'list:List available demos' \
'describe:Print out detailed demo information' \
'install:Install a specific demo' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl demo commands' commands "$@"
}
(( $+functions[_stackablectl__demo__describe_commands] )) ||
_stackablectl__demo__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl demo describe commands' commands "$@"
}
(( $+functions[_stackablectl__demo__help_commands] )) ||
_stackablectl__demo__help_commands() {
    local commands; commands=(
'list:List available demos' \
'describe:Print out detailed demo information' \
'install:Install a specific demo' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl demo help commands' commands "$@"
}
(( $+functions[_stackablectl__demo__help__describe_commands] )) ||
_stackablectl__demo__help__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl demo help describe commands' commands "$@"
}
(( $+functions[_stackablectl__demo__help__help_commands] )) ||
_stackablectl__demo__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl demo help help commands' commands "$@"
}
(( $+functions[_stackablectl__demo__help__install_commands] )) ||
_stackablectl__demo__help__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl demo help install commands' commands "$@"
}
(( $+functions[_stackablectl__demo__help__list_commands] )) ||
_stackablectl__demo__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl demo help list commands' commands "$@"
}
(( $+functions[_stackablectl__demo__install_commands] )) ||
_stackablectl__demo__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl demo install commands' commands "$@"
}
(( $+functions[_stackablectl__demo__list_commands] )) ||
_stackablectl__demo__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl demo list commands' commands "$@"
}
(( $+functions[_stackablectl__experimental-debug_commands] )) ||
_stackablectl__experimental-debug_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl experimental-debug commands' commands "$@"
}
(( $+functions[_stackablectl__help_commands] )) ||
_stackablectl__help_commands() {
    local commands; commands=(
'operator:Interact with single operator instead of the full platform' \
'release:Interact with all operators of the platform which are released together' \
'stack:Interact with stacks, which are ready-to-use product combinations' \
'stacklet:Interact with deployed stacklets, which are bundles of resources and containers required to run the product' \
'demo:Interact with demos, which are end-to-end usage demonstrations of the Stackable data platform' \
'completions:Generate shell completions for this tool' \
'cache:Interact with locally cached files' \
'experimental-debug:EXPERIMENTAL\: Launch a debug container for a Pod' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl help commands' commands "$@"
}
(( $+functions[_stackablectl__help__cache_commands] )) ||
_stackablectl__help__cache_commands() {
    local commands; commands=(
'list:List cached files' \
'clean:Clean cached files' \
    )
    _describe -t commands 'stackablectl help cache commands' commands "$@"
}
(( $+functions[_stackablectl__help__cache__clean_commands] )) ||
_stackablectl__help__cache__clean_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help cache clean commands' commands "$@"
}
(( $+functions[_stackablectl__help__cache__list_commands] )) ||
_stackablectl__help__cache__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help cache list commands' commands "$@"
}
(( $+functions[_stackablectl__help__completions_commands] )) ||
_stackablectl__help__completions_commands() {
    local commands; commands=(
'bash:Generate shell completions for Bash' \
'elvish:Generate shell completions for Elvish' \
'fish:Generate shell completions for Fish' \
'nushell:Generate shell completions for Nushell' \
'zsh:Generate shell completions for ZSH' \
    )
    _describe -t commands 'stackablectl help completions commands' commands "$@"
}
(( $+functions[_stackablectl__help__completions__bash_commands] )) ||
_stackablectl__help__completions__bash_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help completions bash commands' commands "$@"
}
(( $+functions[_stackablectl__help__completions__elvish_commands] )) ||
_stackablectl__help__completions__elvish_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help completions elvish commands' commands "$@"
}
(( $+functions[_stackablectl__help__completions__fish_commands] )) ||
_stackablectl__help__completions__fish_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help completions fish commands' commands "$@"
}
(( $+functions[_stackablectl__help__completions__nushell_commands] )) ||
_stackablectl__help__completions__nushell_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help completions nushell commands' commands "$@"
}
(( $+functions[_stackablectl__help__completions__zsh_commands] )) ||
_stackablectl__help__completions__zsh_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help completions zsh commands' commands "$@"
}
(( $+functions[_stackablectl__help__demo_commands] )) ||
_stackablectl__help__demo_commands() {
    local commands; commands=(
'list:List available demos' \
'describe:Print out detailed demo information' \
'install:Install a specific demo' \
    )
    _describe -t commands 'stackablectl help demo commands' commands "$@"
}
(( $+functions[_stackablectl__help__demo__describe_commands] )) ||
_stackablectl__help__demo__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help demo describe commands' commands "$@"
}
(( $+functions[_stackablectl__help__demo__install_commands] )) ||
_stackablectl__help__demo__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help demo install commands' commands "$@"
}
(( $+functions[_stackablectl__help__demo__list_commands] )) ||
_stackablectl__help__demo__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help demo list commands' commands "$@"
}
(( $+functions[_stackablectl__help__experimental-debug_commands] )) ||
_stackablectl__help__experimental-debug_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help experimental-debug commands' commands "$@"
}
(( $+functions[_stackablectl__help__help_commands] )) ||
_stackablectl__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help help commands' commands "$@"
}
(( $+functions[_stackablectl__help__operator_commands] )) ||
_stackablectl__help__operator_commands() {
    local commands; commands=(
'list:List available operators' \
'describe:Print out detailed operator information' \
'install:Install one or more operators' \
'uninstall:Uninstall one or more operators' \
'installed:List installed operators' \
    )
    _describe -t commands 'stackablectl help operator commands' commands "$@"
}
(( $+functions[_stackablectl__help__operator__describe_commands] )) ||
_stackablectl__help__operator__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help operator describe commands' commands "$@"
}
(( $+functions[_stackablectl__help__operator__install_commands] )) ||
_stackablectl__help__operator__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help operator install commands' commands "$@"
}
(( $+functions[_stackablectl__help__operator__installed_commands] )) ||
_stackablectl__help__operator__installed_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help operator installed commands' commands "$@"
}
(( $+functions[_stackablectl__help__operator__list_commands] )) ||
_stackablectl__help__operator__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help operator list commands' commands "$@"
}
(( $+functions[_stackablectl__help__operator__uninstall_commands] )) ||
_stackablectl__help__operator__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help operator uninstall commands' commands "$@"
}
(( $+functions[_stackablectl__help__release_commands] )) ||
_stackablectl__help__release_commands() {
    local commands; commands=(
'list:List available releases' \
'describe:Print out detailed release information' \
'install:Install a specific release' \
'uninstall:Uninstall a release' \
    )
    _describe -t commands 'stackablectl help release commands' commands "$@"
}
(( $+functions[_stackablectl__help__release__describe_commands] )) ||
_stackablectl__help__release__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help release describe commands' commands "$@"
}
(( $+functions[_stackablectl__help__release__install_commands] )) ||
_stackablectl__help__release__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help release install commands' commands "$@"
}
(( $+functions[_stackablectl__help__release__list_commands] )) ||
_stackablectl__help__release__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help release list commands' commands "$@"
}
(( $+functions[_stackablectl__help__release__uninstall_commands] )) ||
_stackablectl__help__release__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help release uninstall commands' commands "$@"
}
(( $+functions[_stackablectl__help__stack_commands] )) ||
_stackablectl__help__stack_commands() {
    local commands; commands=(
'list:List available stacks' \
'describe:Describe a specific stack' \
'install:Install a specific stack' \
    )
    _describe -t commands 'stackablectl help stack commands' commands "$@"
}
(( $+functions[_stackablectl__help__stack__describe_commands] )) ||
_stackablectl__help__stack__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help stack describe commands' commands "$@"
}
(( $+functions[_stackablectl__help__stack__install_commands] )) ||
_stackablectl__help__stack__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help stack install commands' commands "$@"
}
(( $+functions[_stackablectl__help__stack__list_commands] )) ||
_stackablectl__help__stack__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help stack list commands' commands "$@"
}
(( $+functions[_stackablectl__help__stacklet_commands] )) ||
_stackablectl__help__stacklet_commands() {
    local commands; commands=(
'credentials:Display credentials for a stacklet' \
'list:List deployed stacklets' \
    )
    _describe -t commands 'stackablectl help stacklet commands' commands "$@"
}
(( $+functions[_stackablectl__help__stacklet__credentials_commands] )) ||
_stackablectl__help__stacklet__credentials_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help stacklet credentials commands' commands "$@"
}
(( $+functions[_stackablectl__help__stacklet__list_commands] )) ||
_stackablectl__help__stacklet__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl help stacklet list commands' commands "$@"
}
(( $+functions[_stackablectl__operator_commands] )) ||
_stackablectl__operator_commands() {
    local commands; commands=(
'list:List available operators' \
'describe:Print out detailed operator information' \
'install:Install one or more operators' \
'uninstall:Uninstall one or more operators' \
'installed:List installed operators' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl operator commands' commands "$@"
}
(( $+functions[_stackablectl__operator__describe_commands] )) ||
_stackablectl__operator__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator describe commands' commands "$@"
}
(( $+functions[_stackablectl__operator__help_commands] )) ||
_stackablectl__operator__help_commands() {
    local commands; commands=(
'list:List available operators' \
'describe:Print out detailed operator information' \
'install:Install one or more operators' \
'uninstall:Uninstall one or more operators' \
'installed:List installed operators' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl operator help commands' commands "$@"
}
(( $+functions[_stackablectl__operator__help__describe_commands] )) ||
_stackablectl__operator__help__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator help describe commands' commands "$@"
}
(( $+functions[_stackablectl__operator__help__help_commands] )) ||
_stackablectl__operator__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator help help commands' commands "$@"
}
(( $+functions[_stackablectl__operator__help__install_commands] )) ||
_stackablectl__operator__help__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator help install commands' commands "$@"
}
(( $+functions[_stackablectl__operator__help__installed_commands] )) ||
_stackablectl__operator__help__installed_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator help installed commands' commands "$@"
}
(( $+functions[_stackablectl__operator__help__list_commands] )) ||
_stackablectl__operator__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator help list commands' commands "$@"
}
(( $+functions[_stackablectl__operator__help__uninstall_commands] )) ||
_stackablectl__operator__help__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator help uninstall commands' commands "$@"
}
(( $+functions[_stackablectl__operator__install_commands] )) ||
_stackablectl__operator__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator install commands' commands "$@"
}
(( $+functions[_stackablectl__operator__installed_commands] )) ||
_stackablectl__operator__installed_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator installed commands' commands "$@"
}
(( $+functions[_stackablectl__operator__list_commands] )) ||
_stackablectl__operator__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator list commands' commands "$@"
}
(( $+functions[_stackablectl__operator__uninstall_commands] )) ||
_stackablectl__operator__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl operator uninstall commands' commands "$@"
}
(( $+functions[_stackablectl__release_commands] )) ||
_stackablectl__release_commands() {
    local commands; commands=(
'list:List available releases' \
'describe:Print out detailed release information' \
'install:Install a specific release' \
'uninstall:Uninstall a release' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl release commands' commands "$@"
}
(( $+functions[_stackablectl__release__describe_commands] )) ||
_stackablectl__release__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl release describe commands' commands "$@"
}
(( $+functions[_stackablectl__release__help_commands] )) ||
_stackablectl__release__help_commands() {
    local commands; commands=(
'list:List available releases' \
'describe:Print out detailed release information' \
'install:Install a specific release' \
'uninstall:Uninstall a release' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl release help commands' commands "$@"
}
(( $+functions[_stackablectl__release__help__describe_commands] )) ||
_stackablectl__release__help__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl release help describe commands' commands "$@"
}
(( $+functions[_stackablectl__release__help__help_commands] )) ||
_stackablectl__release__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl release help help commands' commands "$@"
}
(( $+functions[_stackablectl__release__help__install_commands] )) ||
_stackablectl__release__help__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl release help install commands' commands "$@"
}
(( $+functions[_stackablectl__release__help__list_commands] )) ||
_stackablectl__release__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl release help list commands' commands "$@"
}
(( $+functions[_stackablectl__release__help__uninstall_commands] )) ||
_stackablectl__release__help__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl release help uninstall commands' commands "$@"
}
(( $+functions[_stackablectl__release__install_commands] )) ||
_stackablectl__release__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl release install commands' commands "$@"
}
(( $+functions[_stackablectl__release__list_commands] )) ||
_stackablectl__release__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl release list commands' commands "$@"
}
(( $+functions[_stackablectl__release__uninstall_commands] )) ||
_stackablectl__release__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl release uninstall commands' commands "$@"
}
(( $+functions[_stackablectl__stack_commands] )) ||
_stackablectl__stack_commands() {
    local commands; commands=(
'list:List available stacks' \
'describe:Describe a specific stack' \
'install:Install a specific stack' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl stack commands' commands "$@"
}
(( $+functions[_stackablectl__stack__describe_commands] )) ||
_stackablectl__stack__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stack describe commands' commands "$@"
}
(( $+functions[_stackablectl__stack__help_commands] )) ||
_stackablectl__stack__help_commands() {
    local commands; commands=(
'list:List available stacks' \
'describe:Describe a specific stack' \
'install:Install a specific stack' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl stack help commands' commands "$@"
}
(( $+functions[_stackablectl__stack__help__describe_commands] )) ||
_stackablectl__stack__help__describe_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stack help describe commands' commands "$@"
}
(( $+functions[_stackablectl__stack__help__help_commands] )) ||
_stackablectl__stack__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stack help help commands' commands "$@"
}
(( $+functions[_stackablectl__stack__help__install_commands] )) ||
_stackablectl__stack__help__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stack help install commands' commands "$@"
}
(( $+functions[_stackablectl__stack__help__list_commands] )) ||
_stackablectl__stack__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stack help list commands' commands "$@"
}
(( $+functions[_stackablectl__stack__install_commands] )) ||
_stackablectl__stack__install_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stack install commands' commands "$@"
}
(( $+functions[_stackablectl__stack__list_commands] )) ||
_stackablectl__stack__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stack list commands' commands "$@"
}
(( $+functions[_stackablectl__stacklet_commands] )) ||
_stackablectl__stacklet_commands() {
    local commands; commands=(
'credentials:Display credentials for a stacklet' \
'list:List deployed stacklets' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl stacklet commands' commands "$@"
}
(( $+functions[_stackablectl__stacklet__credentials_commands] )) ||
_stackablectl__stacklet__credentials_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stacklet credentials commands' commands "$@"
}
(( $+functions[_stackablectl__stacklet__help_commands] )) ||
_stackablectl__stacklet__help_commands() {
    local commands; commands=(
'credentials:Display credentials for a stacklet' \
'list:List deployed stacklets' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'stackablectl stacklet help commands' commands "$@"
}
(( $+functions[_stackablectl__stacklet__help__credentials_commands] )) ||
_stackablectl__stacklet__help__credentials_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stacklet help credentials commands' commands "$@"
}
(( $+functions[_stackablectl__stacklet__help__help_commands] )) ||
_stackablectl__stacklet__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stacklet help help commands' commands "$@"
}
(( $+functions[_stackablectl__stacklet__help__list_commands] )) ||
_stackablectl__stacklet__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stacklet help list commands' commands "$@"
}
(( $+functions[_stackablectl__stacklet__list_commands] )) ||
_stackablectl__stacklet__list_commands() {
    local commands; commands=()
    _describe -t commands 'stackablectl stacklet list commands' commands "$@"
}

if [ "$funcstack[1]" = "_stackablectl" ]; then
    _stackablectl "$@"
else
    compdef _stackablectl stackablectl
fi
